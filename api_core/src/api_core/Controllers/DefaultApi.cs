/*
 * Python to .Net
 *
 * Still whitout description.
 *
 * OpenAPI spec version: 0.25.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
//using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using api_core.Attributes;
using api_core.Models;

namespace api_core.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Return one or many blockchain explorer URLs.
        /// </summary>
        /// <remarks>Should return one or many blockchain explorer URLs for the given address.</remarks>
        /// <param name="address">Address for find blockchain explorer URLs.</param>
        /// <response code="200">Blockchain explorer URLs for the given address.</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/addresses/{address}/explorer-url")]
        [ValidateModelState]
        [SwaggerOperation("ApiAddressesAddressExplorerUrlGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Blockchain explorer URLs for the given address.")]
        public virtual IActionResult ApiAddressesAddressExplorerUrlGet([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default(List<string>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Valid address API endpoint.
        /// </summary>
        /// <remarks>Should check and return address validity.&lt;br&gt; Should check and return wallet address validity</remarks>
        /// <param name="address">Address for find blockchain explorer URLs</param>
        /// <response code="200">Validation. The Validation value.</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/addresses/{address}/validity")]
        [ValidateModelState]
        [SwaggerOperation("ApiAddressesAddressValidityGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2005), description: "Validation. The Validation value.")]
        public virtual IActionResult ApiAddressesAddressValidityGet([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2005));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"isValid\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2005>(exampleJson)
            : default(InlineResponse2005);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete observation
        /// </summary>
        /// <remarks>Should forget the wallet address and stop observing its balance.</remarks>
        /// <param name="address">Address of the wallet</param>
        /// <response code="200">DELETE is OK</response>
        /// <response code="0"></response>
        [HttpDelete]
        [Route("/api/balances/{address}/observation")]
        [ValidateModelState]
        [SwaggerOperation("ApiBalancesAddressObservationDelete")]
        public virtual IActionResult ApiBalancesAddressObservationDelete([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Create balance observation
        /// </summary>
        /// <remarks>Should remember the wallet address to observe the wallet balance and return it in the [GET] /api/balances , if the balance is non zero.</remarks>
        /// <param name="address">Address of the wallet</param>
        /// <response code="200">POST is OK</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/balances/{address}/observation")]
        [ValidateModelState]
        [SwaggerOperation("ApiBalancesAddressObservationPost")]
        public virtual IActionResult ApiBalancesAddressObservationPost([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Return balance of the observed wallets
        /// </summary>
        /// <remarks>Should return balances of the observed wallets with non zero balances. Wallets balance observation is enabled by the [POST] /api/balances/{address}/observation and disabled by the [DELETE] /api/balances/{address}/observation.</remarks>
        /// <param name="take">Limit amount of the returned values</param>
        /// <param name="continuation">context of the previous request</param>
        /// <response code="200">OK</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/balances")]
        [ValidateModelState]
        [SwaggerOperation("ApiBalancesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "OK")]
        public virtual IActionResult ApiBalancesGet([FromQuery][Required()]int? take, [FromQuery]string continuation)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"isValid\" : true,\n  \"continuation\" : \"continuation\",\n  \"items\" : [ {\n    \"address\" : \"address\",\n    \"balance\" : \"balance\",\n    \"assetId\" : \"assetId\",\n    \"block\" : 0\n  }, {\n    \"address\" : \"address\",\n    \"balance\" : \"balance\",\n    \"assetId\" : \"assetId\",\n    \"block\" : 0\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2002>(exampleJson)
            : default(InlineResponse2002);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return some general service info
        /// </summary>
        /// <remarks>Check if the server is running correctly</remarks>
        /// <response code="200">A JSON object containing information about the service</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/IsAlive")]
        [ValidateModelState]
        [SwaggerOperation("ApiIsAliveGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2003), description: "A JSON object containing information about the service")]
        public virtual IActionResult ApiIsAliveGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2003));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"isDebug\" : true,\n  \"name\" : \"name\",\n  \"env\" : \"env\",\n  \"version\" : \"version\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2003>(exampleJson)
            : default(InlineResponse2003);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sign transaction method.
        /// </summary>
        /// <remarks>Should sign given transaction with the given private key.</remarks>
        /// <param name="inlineObject4"></param>
        /// <response code="200">Signed transaction, which will be used to broadcast the transaction [PUT] /api/transactions/broadcast</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/sign")]
        [ValidateModelState]
        [SwaggerOperation("ApiSignPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2004), description: "Signed transaction, which will be used to broadcast the transaction [PUT] /api/transactions/broadcast")]
        public virtual IActionResult ApiSignPost([FromBody]InlineObject4 inlineObject4)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2004));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"signedTransaction\" : \"signedTransaction\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2004>(exampleJson)
            : default(InlineResponse2004);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Build not signed transactions with many inputs.
        /// </summary>
        /// <remarks>Should build not signed transaction with many inputs. If the transaction with the specified operationId has already been built by one of the [POST] /api/transactions/_* call, it should be ignored</remarks>
        /// <param name="inlineObject1"></param>
        /// <response code="200">OK</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/transaction/many-inputs")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionManyInputsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "OK")]
        public virtual IActionResult ApiTransactionManyInputsPost([FromBody]InlineObject1 inlineObject1)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"transactionContext\" : \"transactionContext\",\n  \"ErrorCode\" : \"amountIsTooSmall\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
            : default(InlineResponse2001);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return broadcasted transaction by the opreationId.
        /// </summary>
        /// <remarks>Should return broadcasted transaction by the opreationId. All transactions with many inputs, that were broadcasted by the should be available here.</remarks>
        /// <param name="operationId">Operation Id.</param>
        /// <response code="200">Broadcasted transaction by the opreationId.</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/transactions/broadcast/many-inputs/{operationId}")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsBroadcastManyInputsOperationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2009), description: "Broadcasted transaction by the opreationId.")]
        public virtual IActionResult ApiTransactionsBroadcastManyInputsOperationIdGet([FromRoute][Required]string operationId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2009));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"inputs\" : [ {\n    \"amount\" : \"amount\",\n    \"fromAddress\" : \"fromAddress\"\n  }, {\n    \"amount\" : \"amount\",\n    \"fromAddress\" : \"fromAddress\"\n  } ],\n  \"fee\" : \"fee\",\n  \"operationId\" : \"operationId\",\n  \"errorCode\" : \"unknown\",\n  \"block\" : 0,\n  \"state\" : \"inProgress\",\n  \"error\" : \"error\",\n  \"toAddress\" : \"toAddress\",\n  \"hash\" : \"hash\",\n  \"timestamp\" : \"timestamp\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2009>(exampleJson)
            : default(InlineResponse2009);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return broadcasted transactions by operation ID.
        /// </summary>
        /// <remarks>Should return broadcasted transaction by operation ID . All transactions with many outputs, that were broadcasted by the [POST] /api/transaction/broadcast should be available here.</remarks>
        /// <param name="operationId">Operation ID.</param>
        /// <response code="200">Broadcasted transactions by Operation ID.</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/transactions/broadcast/many-outputs/{operationId}")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsBroadcastManyOutputsOperationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20010), description: "Broadcasted transactions by Operation ID.")]
        public virtual IActionResult ApiTransactionsBroadcastManyOutputsOperationIdGet([FromRoute][Required]string operationId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20010));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"outputs\" : [ {\n    \"amount\" : \"amount\",\n    \"toAddress\" : \"toAddress\"\n  }, {\n    \"amount\" : \"amount\",\n    \"toAddress\" : \"toAddress\"\n  } ],\n  \"fee\" : \"fee\",\n  \"operationId\" : \"operationId\",\n  \"errorCode\" : \"unknown\",\n  \"fromAddress\" : \"fromAddress\",\n  \"block\" : 0,\n  \"state\" : \"inProgress\",\n  \"error\" : \"error\",\n  \"hash\" : \"hash\",\n  \"timestamp\" : \"timestamp\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse20010>(exampleJson)
            : default(InlineResponse20010);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove an specified transaction from the broadcasted transactions.
        /// </summary>
        /// <remarks>Should remove specified transaction from the broadcasted transactions, and affect transactions returned by the [GET] /api/transactions/broadcast/{operatioId}.</remarks>
        /// <param name="operationId">Specified transaction from the broadcasted transactions.</param>
        /// <response code="200">Successfully removed from broadcasted transactions list.</response>
        /// <response code="0"></response>
        [HttpDelete]
        [Route("/api/transactions/broadcast/{operationId}")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsBroadcastOperationIdDelete")]
        public virtual IActionResult ApiTransactionsBroadcastOperationIdDelete([FromRoute][Required]string operationId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Broadcast the signed transaction.
        /// </summary>
        /// <remarks>Should broadcast the signed transaction. Result code can be evaluated synchronously or returned asynchronously in the &#x60;[GET] /api/transactions/broadcast/_*&#x60; response with error code.</remarks>
        /// <param name="inlineObject2"></param>
        /// <response code="200">Error code.</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/transactions/broadcast")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsBroadcastPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2006), description: "Error code.")]
        public virtual IActionResult ApiTransactionsBroadcastPost([FromBody]InlineObject2 inlineObject2)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2006));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"errorCode\" : \"amountIsTooSmall\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2006>(exampleJson)
            : default(InlineResponse2006);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return broadcasted transaction by the operationId.
        /// </summary>
        /// <remarks>Should return broadcasted transaction by the operationId . All transactions with single input and output, that were broadcasted by the [POST] /api/transactions/broadcast should be available here.</remarks>
        /// <param name="operationId">Operation Id.</param>
        /// <response code="200">Broadcasted transaction by the opreationId.</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/transactions/broadcast/single/{operationId}")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsBroadcastSingleOperationIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2008), description: "Broadcasted transaction by the opreationId.")]
        public virtual IActionResult ApiTransactionsBroadcastSingleOperationIdGet([FromRoute][Required]string operationId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2008));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"amount\" : \"amount\",\n  \"fee\" : \"fee\",\n  \"operationId\" : \"operationId\",\n  \"errorCode\" : \"unknown\",\n  \"block\" : 0,\n  \"state\" : \"inProgress\",\n  \"error\" : \"error\",\n  \"hash\" : \"hash\",\n  \"timestamp\" : \"timestamp\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2008>(exampleJson)
            : default(InlineResponse2008);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get history from address.
        /// </summary>
        /// <remarks>Should return completed transactions that transfer fund from the &#x60;address&#x60; and that were broadcasted after the transaction with the &#x60;hash&#x60; equal to the &#x60;afterHash&#x60;.&lt;br&gt; If &#x60;afterHash&#x60; is empty, transactions should be read from the beginning. &lt;br&gt; Should include all transactions broadcasted even if not going through &#x60;/transaction/broadcast/_*&#x60; API endpoints. &lt;br&gt; If there are no transactions to return, empty array should be returned. Amount of the returned transactions should not exceed &#x60;take&#x60; .</remarks>
        /// <param name="address">Address for find blockchain explorer URLs</param>
        /// <param name="take"></param>
        /// <param name="afterHash"></param>
        /// <response code="200">Operation ID. The transaction Id.</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/transactions/history/from/{address}")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsHistoryFromAddressGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "Operation ID. The transaction Id.")]
        public virtual IActionResult ApiTransactionsHistoryFromAddressGet([FromRoute][Required]string address, [FromQuery][Required()]int? take, [FromQuery]string afterHash)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "\"{}\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Stop observation from address
        /// </summary>
        /// <remarks>Should stop observation of the transactions that transfer fund from the address . Should affect result of the [GET] /api/transactions/history/from/{address}.</remarks>
        /// <param name="address">Address from stop being observed</param>
        /// <response code="200">Ok</response>
        /// <response code="0"></response>
        [HttpDelete]
        [Route("/api/transactions/history/from/{address}/observation")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsHistoryFromAddressObservationDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2004), description: "Ok")]
        public virtual IActionResult ApiTransactionsHistoryFromAddressObservationDelete([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2004));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"signedTransaction\" : \"signedTransaction\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2004>(exampleJson)
            : default(InlineResponse2004);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Starts observation of the transactions.
        /// </summary>
        /// <remarks>Should starts observation of the transactions that transfer fund from the address, and affect the result of the [GET] /api/transactions/history/from/{address}.</remarks>
        /// <param name="address">Address from which funds are transferred.</param>
        /// <response code="200">Successfully stored in observation list.</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/transactions/history/from/{address}/observation")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsHistoryFromAddressObservationPost")]
        public virtual IActionResult ApiTransactionsHistoryFromAddressObservationPost([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Get history to address
        /// </summary>
        /// <remarks>Should return completed transactions that transfer fund to the address and that were broadcasted after the transaction with the hash equal to the &#x60;afterHash&#x60;. If &#x60;afterHash&#x60; is empty, transactions should be read from the beginning. Should include all transactions broadcasted even those not going through &#x60;/transaction/broadcast/_*&#x60; API endpoints. If there are no transactions to return, empty array should be returned. Amount of the returned transactions should not exceed take.</remarks>
        /// <param name="address">Address from which you want to know the history</param>
        /// <param name="take">Maximum return transactions</param>
        /// <param name="afterHash">Address of the transaction after which you have to search</param>
        /// <response code="200">Transactions array.</response>
        /// <response code="0"></response>
        [HttpGet]
        [Route("/api/transactions/history/to/{address}")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsHistoryToAddressGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Transaction>), description: "Transactions array.")]
        public virtual IActionResult ApiTransactionsHistoryToAddressGet([FromRoute][Required]string address, [FromQuery]int? take, [FromQuery]string afterHash)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Transaction>));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"assetId\" : \"assetId\",\n  \"operationId\" : \"operationId\",\n  \"timespam\" : \"timespam\",\n  \"fromAddress\" : \"fromAddress\",\n  \"toAddress\" : \"toAddress\",\n  \"ammount\" : \"ammount\",\n  \"hash\" : \"hash\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Transaction>>(exampleJson)
            : default(List<Transaction>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Stop observation to address
        /// </summary>
        /// <remarks>Should stop observation of the transactions that transfer fund to the address . Should affect result of the &#39;[GET] /api/transactions/history/to/{address}&#39; .</remarks>
        /// <param name="address">Address to stop being observed</param>
        /// <response code="200">Ok</response>
        /// <response code="0"></response>
        [HttpDelete]
        [Route("/api/transactions/history/to/{address}/observation")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsHistoryToAddressObservationDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2004), description: "Ok")]
        public virtual IActionResult ApiTransactionsHistoryToAddressObservationDelete([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2004));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"signedTransaction\" : \"signedTransaction\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2004>(exampleJson)
            : default(InlineResponse2004);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Starts observation of the transactions.
        /// </summary>
        /// <remarks>Should starts observation of the transactions that transfer fund to the address, and affect the result of the [GET] /api/transactions/history/to/{address}.</remarks>
        /// <param name="address">Address to which funds are transferred.</param>
        /// <response code="200">Successfully stored in observation list.</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/transactions/history/to/{address}/observation")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsHistoryToAddressObservationPost")]
        public virtual IActionResult ApiTransactionsHistoryToAddressObservationPost([FromRoute][Required]string address)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Build not signed transaction with many outputs.
        /// </summary>
        /// <remarks>Should build not signed transaction with many outputs. If the transaction with the specified &#x60;operationId&#x60; has already been built by one of the &#x60;[POST] /api/transactions/_*&#x60; call, it should be ignored and regular response (as in the first request) should be returned. Fee should be added to the specified amount.</remarks>
        /// <param name="inlineObject3"></param>
        /// <response code="200">Error code. The transaction context</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/transactions/many-outputs")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsManyOutputsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2007), description: "Error code. The transaction context")]
        public virtual IActionResult ApiTransactionsManyOutputsPost([FromBody]InlineObject3 inlineObject3)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2007));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"transactionContext\" : \"transactionContext\",\n  \"errorCode\" : \"amountIsTooSmall\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2007>(exampleJson)
            : default(InlineResponse2007);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Build not signed single transaction
        /// </summary>
        /// <remarks>Should build not signed transaction to transfer from the single source to the single destination. If the transaction with the specified operationId has already been built by one of the [POST] /api/transactions/_* call, it should be ignored and regular response (as in the first request) should be returned.</remarks>
        /// <param name="inlineObject"></param>
        /// <response code="200">OK</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/transactions/single")]
        [ValidateModelState]
        [SwaggerOperation("ApiTransactionsSinglePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "OK")]
        public virtual IActionResult ApiTransactionsSinglePost([FromBody]InlineObject inlineObject)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"transactionContext\" : \"transactionContext\",\n  \"ErrorCode\" : \"amountIsTooSmall\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
            : default(InlineResponse2001);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create wallet method.
        /// </summary>
        /// <remarks>Should create a new wallet (address) in the blockchain.</remarks>
        /// <response code="200">The private key, public address and address context for the wallet created.</response>
        /// <response code="0"></response>
        [HttpPost]
        [Route("/api/wallets")]
        [ValidateModelState]
        [SwaggerOperation("ApiWalletsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "The private key, public address and address context for the wallet created.")]
        public virtual IActionResult ApiWalletsPost()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            string exampleJson = null;
            exampleJson = "{\n  \"privateKey\" : \"privateKey\",\n  \"addressContext\" : \"addressContext\",\n  \"publicAddress\" : \"publicAddress\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
            : default(InlineResponse200);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
