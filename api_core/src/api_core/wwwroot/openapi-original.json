{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Python to .Net",
    "description" : "Still whitout description.",
    "version" : "0.25.1"
  },
  "servers" : [ {
    "url" : "http://www.skycoin.net",
    "description" : "Main Skycoin server"
  }, {
    "url" : "http://staging.node.skycoin.net",
    "description" : "Internal staging server for developer."
  } ],
  "paths" : {
    "/api/wallets" : {
      "post" : {
        "summary" : "Create wallet method.",
        "description" : "Should create a new wallet (address) in the blockchain.",
        "responses" : {
          "200" : {
            "description" : "The private key, public address and address context for the wallet created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/balances/{address}/observation" : {
      "post" : {
        "summary" : "Create balance observation",
        "description" : "Should remember the wallet address to observe the wallet balance and return it in the [GET] /api/balances , if the balance is non zero.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address of the wallet",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "POST is OK"
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      },
      "delete" : {
        "summary" : "Delete observation",
        "description" : "Should forget the wallet address and stop observing its balance.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address of the wallet",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "DELETE is OK"
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/transactions/history/to/{address}" : {
      "get" : {
        "summary" : "Get history to address",
        "description" : "Should return completed transactions that transfer fund to the address and that were broadcasted after the transaction with the hash equal to the `afterHash`. If `afterHash` is empty, transactions should be read from the beginning. Should include all transactions broadcasted even those not going through `/transaction/broadcast/*` API endpoints. If there are no transactions to return, empty array should be returned. Amount of the returned transactions should not exceed take.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address from which you want to know the history",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "take",
          "in" : "query",
          "description" : "Maximum return transactions",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "afterHash",
          "in" : "query",
          "description" : "Address of the transaction after which you have to search",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Transactions array.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/transaction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transactions/single" : {
      "post" : {
        "summary" : "Build not signed single transaction",
        "description" : "Should build not signed transaction to transfer from the single source to the single destination. If the transaction with the specified operationId has already been built by one of the [POST] /api/transactions/* call, it should be ignored and regular response (as in the first request) should be returned.",
        "requestBody" : {
          "description" : "Transaction object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "operationId" : {
                    "type" : "string",
                    "description" : "Operation ID"
                  },
                  "fromAddress" : {
                    "type" : "string",
                    "description" : "Source address"
                  },
                  "toAddress" : {
                    "type" : "string",
                    "description" : "Destination address"
                  },
                  "assetId" : {
                    "type" : "string",
                    "description" : "Asset ID to transfer"
                  },
                  "includeFee" : {
                    "type" : "boolean",
                    "description" : "Ignored. No Fiber coin implements this ... yet"
                  },
                  "amount" : {
                    "type" : "string",
                    "description" : "Amount to transfer. Integer as string, aligned to the asset accuracy. Actual value can be calculated as x = amount / (10 ^ asset.Accuracy)"
                  }
                },
                "description" : "Object representing the transaction"
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object"
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/balances" : {
      "get" : {
        "summary" : "Return balance of the observed wallets",
        "description" : "Should return balances of the observed wallets with non zero balances. Wallets balance observation is enabled by the [POST] /api/balances/{address}/observation and disabled by the [DELETE] /api/balances/{address}/observation.",
        "parameters" : [ {
          "name" : "take",
          "in" : "query",
          "description" : "Limit amount of the returned values",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "continuation",
          "in" : "query",
          "description" : "context of the previous request",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transaction/many-inputs" : {
      "post" : {
        "summary" : "Build not signed transactions with many inputs.",
        "description" : "Should build not signed transaction with many inputs. If the transaction with the specified operationId has already been built by one of the [POST] /api/transactions/* call, it should be ignored",
        "requestBody" : {
          "description" : "Transaction object",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "operationId" : {
                    "type" : "string",
                    "description" : "Operation ID"
                  },
                  "inputs" : {
                    "type" : "array",
                    "description" : "Sources",
                    "items" : {
                      "$ref" : "#/components/schemas/apitransactionmanyinputs_inputs"
                    }
                  },
                  "toAddress" : {
                    "type" : "string",
                    "description" : "Destination Address"
                  },
                  "assetId" : {
                    "type" : "string",
                    "description" : "Ticker ID of the fiber coin, SKY by default"
                  }
                },
                "description" : "ewr"
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_1"
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/IsAlive" : {
      "get" : {
        "summary" : "Return some general service info",
        "description" : "Check if the server is running correctly",
        "responses" : {
          "200" : {
            "description" : "A JSON object containing information about the service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transactions/history/from/{address}" : {
      "get" : {
        "summary" : "Get history from address.",
        "description" : "Should return completed transactions that transfer fund from the `address` and that were broadcasted after the transaction with the `hash` equal to the `afterHash`.<br> If `afterHash` is empty, transactions should be read from the beginning. <br> Should include all transactions broadcasted even if not going through `/transaction/broadcast/*` API endpoints. <br> If there are no transactions to return, empty array should be returned. Amount of the returned transactions should not exceed `take` .",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address for find blockchain explorer URLs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "take",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "afterHash",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Operation ID. The transaction Id.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "properties" : {
                      "operationId" : {
                        "type" : "string",
                        "description" : "Can be empty. <br> Should be not empty for transactions that broadcasted using this API."
                      },
                      "timestamp" : {
                        "type" : "string",
                        "description" : "Transaction moment as ISO 8601 in UTC",
                        "format" : "date-time"
                      },
                      "fromAddress" : {
                        "type" : "string",
                        "description" : "Source address."
                      },
                      "toAddress" : {
                        "type" : "string",
                        "description" : "Destination address."
                      },
                      "assetId" : {
                        "type" : "string",
                        "description" : "Asset ID e.g. SKY"
                      },
                      "amount" : {
                        "type" : "string",
                        "description" : "Amount without fee. Is integer as string, aligned to the asset accuracy. Actual value can be calculated as `x = sourceAmount * (10 ^ asset.Accuracy)`"
                      },
                      "hash" : {
                        "type" : "string",
                        "description" : "Transaction hash as base64 string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transactions/history/from/{address}/observation" : {
      "post" : {
        "summary" : "Starts observation of the transactions.",
        "description" : "Should starts observation of the transactions that transfer fund from the address, and affect the result of the [GET] /api/transactions/history/from/{address}.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address from which funds are transferred.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully stored in observation list."
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      },
      "delete" : {
        "summary" : "Stop observation from address",
        "description" : "Should stop observation of the transactions that transfer fund from the address . Should affect result of the [GET] /api/transactions/history/from/{address}.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address from stop being observed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/transactions/history/to/{address}/observation" : {
      "post" : {
        "summary" : "Starts observation of the transactions.",
        "description" : "Should starts observation of the transactions that transfer fund to the address, and affect the result of the [GET] /api/transactions/history/to/{address}.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address to which funds are transferred.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully stored in observation list."
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      },
      "delete" : {
        "summary" : "Stop observation to address",
        "description" : "Should stop observation of the transactions that transfer fund to the address . Should affect result of the '[GET] /api/transactions/history/to/{address}' .",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address to stop being observed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/addresses/{address}/validity" : {
      "get" : {
        "summary" : "Valid address API endpoint.",
        "description" : "Should check and return address validity.<br> Should check and return wallet address validity",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address for find blockchain explorer URLs",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Validation. The Validation value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transactions/broadcast" : {
      "post" : {
        "summary" : "Broadcast the signed transaction.",
        "description" : "Should broadcast the signed transaction. Result code can be evaluated synchronously or returned asynchronously in the `[GET] /api/transactions/broadcast/*` response with error code.",
        "requestBody" : {
          "description" : "A JSON object containing: Operation ID. The signed transaction returned by the [POST] /api/sign",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "operationId" : {
                    "type" : "string",
                    "description" : "Operation ID."
                  },
                  "signedTransaction" : {
                    "type" : "string",
                    "description" : "The signed transaction returned by the [POST] /api/sign."
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_2"
        },
        "responses" : {
          "200" : {
            "description" : "Error code.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_6"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/addresses/{address}/explorer-url" : {
      "get" : {
        "summary" : "Return one or many blockchain explorer URLs.",
        "description" : "Should return one or many blockchain explorer URLs for the given address.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Address for find blockchain explorer URLs.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Blockchain explorer URLs for the given address.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transactions/many-outputs" : {
      "post" : {
        "summary" : "Build not signed transaction with many outputs.",
        "description" : "Should build not signed transaction with many outputs. If the transaction with the specified `operationId` has already been built by one of the `[POST] /api/transactions/*` call, it should be ignored and regular response (as in the first request) should be returned. Fee should be added to the specified amount.",
        "requestBody" : {
          "description" : "A JSON object containing: Operation ID. Source address. Destinations. Asset ID to transfer, defaults to SKY",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "operationId" : {
                    "type" : "string",
                    "description" : "Operation ID."
                  },
                  "fromAddress" : {
                    "type" : "string",
                    "description" : "Source address."
                  },
                  "outputs" : {
                    "type" : "array",
                    "description" : "Destinations.",
                    "items" : {
                      "$ref" : "#/components/schemas/apitransactionsmanyoutputs_outputs"
                    }
                  },
                  "assetId" : {
                    "type" : "string",
                    "description" : "Asset ID to transfer, defaults to SKY."
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_3"
        },
        "responses" : {
          "200" : {
            "description" : "Error code. The transaction context",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/transactions/broadcast/{operationId}" : {
      "delete" : {
        "summary" : "Remove an specified transaction from the broadcasted transactions.",
        "description" : "Should remove specified transaction from the broadcasted transactions, and affect transactions returned by the [GET] /api/transactions/broadcast/{operatioId}.",
        "parameters" : [ {
          "name" : "operationId",
          "in" : "path",
          "description" : "Specified transaction from the broadcasted transactions.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully removed from broadcasted transactions list."
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    },
    "/api/transactions/broadcast/single/{operationId}" : {
      "get" : {
        "summary" : "Return broadcasted transaction by the operationId.",
        "description" : "Should return broadcasted transaction by the operationId . All transactions with single input and output, that were broadcasted by the [POST] /api/transactions/broadcast should be available here.",
        "parameters" : [ {
          "name" : "operationId",
          "in" : "path",
          "description" : "Operation Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Broadcasted transaction by the opreationId.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transactions/broadcast/many-inputs/{operationId}" : {
      "get" : {
        "summary" : "Return broadcasted transaction by the opreationId.",
        "description" : "Should return broadcasted transaction by the opreationId. All transactions with many inputs, that were broadcasted by the should be available here.",
        "parameters" : [ {
          "name" : "operationId",
          "in" : "path",
          "description" : "Operation Id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Broadcasted transaction by the opreationId.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_9"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/transactions/broadcast/many-outputs/{operationId}" : {
      "get" : {
        "summary" : "Return broadcasted transactions by operation ID.",
        "description" : "Should return broadcasted transaction by operation ID . All transactions with many outputs, that were broadcasted by the [POST] /api/transaction/broadcast should be available here.",
        "parameters" : [ {
          "name" : "operationId",
          "in" : "path",
          "description" : "Operation ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Broadcasted transactions by Operation ID.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        }
      }
    },
    "/api/sign" : {
      "post" : {
        "summary" : "Sign transaction method.",
        "description" : "Should sign given transaction with the given private key.",
        "requestBody" : {
          "description" : "A JSON object containing: The Private Keys, which were returned by the [POST] /api/wallets. Multiple keys can be used for transactions with multiple inputs. The Transaction Context in the blockchain specific format [POST] /api/transactions or  [PUT] /api/transactions.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "privateKeys" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "transactionContext" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "required" : true,
          "$ref" : "#/components/requestBodies/inline_object_4"
        },
        "responses" : {
          "200" : {
            "description" : "Signed transaction, which will be used to broadcast the transaction [PUT] /api/transactions/broadcast",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/schemas/genericError"
          }
        },
        "security" : [ {
          "CsrfTokenAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "genericError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          }
        },
        "description" : "This is a generic error that should be default response"
      },
      "transaction" : {
        "type" : "object",
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID. Can be empty. Should be not empty for ransactions that broadcasted using this Blockchain.Api"
          },
          "timespam" : {
            "type" : "string",
            "description" : "Transaction moment as ISO 8601 in UTC"
          },
          "fromAddress" : {
            "type" : "string",
            "description" : "Source address"
          },
          "toAddress" : {
            "type" : "string",
            "description" : "Destination address"
          },
          "assetId" : {
            "type" : "string",
            "description" : "Asset ID e.g. SKY"
          },
          "ammount" : {
            "type" : "string",
            "description" : "Amount without fee. Is integer as string, aligned to the asset accuracy. Actual value can be calculated as x = sourceAmount * (10 ^ asset.Accuracy)"
          },
          "hash" : {
            "type" : "string",
            "description" : "Transaction hash as base64 string"
          }
        },
        "description" : "Represents a transiction",
        "example" : {
          "assetId" : "assetId",
          "operationId" : "operationId",
          "timespam" : "timespam",
          "fromAddress" : "fromAddress",
          "toAddress" : "toAddress",
          "ammount" : "ammount",
          "hash" : "hash"
        }
      },
      "inline_response_200" : {
        "properties" : {
          "privateKey" : {
            "type" : "string",
            "description" : "Private key, which will be used to sign transactions by the [POST] /api/sign"
          },
          "publicAddress" : {
            "type" : "string",
            "description" : "Address which identifies the wallet in the blockchain"
          },
          "addressContext" : {
            "type" : "string",
            "description" : "Any non security sensitive data associated with wallet. This context will be passed to [POST] /api/transactions/*. Can be empty."
          }
        },
        "example" : {
          "privateKey" : "privateKey",
          "addressContext" : "addressContext",
          "publicAddress" : "publicAddress"
        }
      },
      "inline_object" : {
        "type" : "object",
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID"
          },
          "fromAddress" : {
            "type" : "string",
            "description" : "Source address"
          },
          "toAddress" : {
            "type" : "string",
            "description" : "Destination address"
          },
          "assetId" : {
            "type" : "string",
            "description" : "Asset ID to transfer"
          },
          "includeFee" : {
            "type" : "boolean",
            "description" : "Ignored. No Fiber coin implements this ... yet"
          },
          "amount" : {
            "type" : "string",
            "description" : "Amount to transfer. Integer as string, aligned to the asset accuracy. Actual value can be calculated as x = amount / (10 ^ asset.Accuracy)"
          }
        },
        "description" : "Object representing the transaction"
      },
      "inline_response_200_1" : {
        "properties" : {
          "ErrorCode" : {
            "type" : "string",
            "description" : "Error Code",
            "enum" : [ "amountIsTooSmall", "notEnoughBalance" ]
          },
          "transactionContext" : {
            "type" : "string",
            "description" : "The transaction context which will be passed to the [POST] /api/sign"
          }
        },
        "example" : {
          "transactionContext" : "transactionContext",
          "ErrorCode" : "amountIsTooSmall"
        }
      },
      "inline_response_200_2_items" : {
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Wallet address"
          },
          "assetId" : {
            "type" : "string",
            "description" : "Asset ID"
          },
          "balance" : {
            "type" : "string",
            "description" : "Balance is integer as string, aligned to the asset accuracy. Actual value can be calculated as x = sourceBalance * (10 ^ asset.Accuracy)Balance is integer as string, aligned to the asset accuracy. Actual value can be calculated as x = sourceBalance * (10 ^ asset.Accuracy)"
          },
          "block" : {
            "type" : "integer",
            "description" : "Incremental ID of the moment, when balance is updated. It should be the same sequence as for block in the [GET] /api/transactions/broadcast/* responses",
            "format" : "int32"
          }
        },
        "example" : {
          "address" : "address",
          "balance" : "balance",
          "assetId" : "assetId",
          "block" : 0
        }
      },
      "inline_response_200_2" : {
        "properties" : {
          "isValid" : {
            "type" : "boolean",
            "description" : "Indicate if the address is valid"
          },
          "continuation" : {
            "type" : "string",
            "description" : "Continuation token"
          },
          "items" : {
            "type" : "array",
            "description" : "Current batch of items",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_2_items"
            }
          }
        },
        "example" : {
          "isValid" : true,
          "continuation" : "continuation",
          "items" : [ {
            "address" : "address",
            "balance" : "balance",
            "assetId" : "assetId",
            "block" : 0
          }, {
            "address" : "address",
            "balance" : "balance",
            "assetId" : "assetId",
            "block" : 0
          } ]
        }
      },
      "apitransactionmanyinputs_inputs" : {
        "properties" : {
          "fromAddress" : {
            "type" : "string",
            "description" : "Source Address"
          },
          "amount" : {
            "type" : "string",
            "description" : "Amount to transfer from the  fromAddress. Integer as string, aligned to the droplet precision exponent. Actual value can be calculated as x = amount / (10 ^ asset.Accuracy)."
          }
        }
      },
      "inline_object_1" : {
        "type" : "object",
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID"
          },
          "inputs" : {
            "type" : "array",
            "description" : "Sources",
            "items" : {
              "$ref" : "#/components/schemas/apitransactionmanyinputs_inputs"
            }
          },
          "toAddress" : {
            "type" : "string",
            "description" : "Destination Address"
          },
          "assetId" : {
            "type" : "string",
            "description" : "Ticker ID of the fiber coin, SKY by default"
          }
        },
        "description" : "ewr"
      },
      "inline_response_200_3" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the service"
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the service"
          },
          "env" : {
            "type" : "string",
            "description" : "ENV_INFO environment variable value"
          },
          "isDebug" : {
            "type" : "boolean",
            "description" : "Flag, wich indicates if the service is built in the debug configuration or not"
          }
        },
        "example" : {
          "isDebug" : true,
          "name" : "name",
          "env" : "env",
          "version" : "version"
        }
      },
      "inline_response_200_4" : {
        "properties" : {
          "signedTransaction" : {
            "type" : "string"
          }
        },
        "example" : {
          "signedTransaction" : "signedTransaction"
        }
      },
      "inline_response_200_5" : {
        "properties" : {
          "isValid" : {
            "type" : "boolean",
            "description" : "Flag, which indicates that the address is valid"
          }
        },
        "example" : {
          "isValid" : true
        }
      },
      "inline_object_2" : {
        "type" : "object",
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID."
          },
          "signedTransaction" : {
            "type" : "string",
            "description" : "The signed transaction returned by the [POST] /api/sign."
          }
        }
      },
      "inline_response_200_6" : {
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error code. Can be empty. Should be non empty if an error that match one of the listed code is occured. For other errors use HTTP status codes.",
            "enum" : [ "amountIsTooSmall", "notEnoughBalance" ]
          }
        },
        "example" : {
          "errorCode" : "amountIsTooSmall"
        }
      },
      "apitransactionsmanyoutputs_outputs" : {
        "properties" : {
          "toAddress" : {
            "type" : "string",
            "description" : "Destination address."
          },
          "amount" : {
            "type" : "string",
            "description" : "Amount to transfer to the  toAddress. Integer as string, aligned to the asset accuracy. Actual value can be calculated as x = amount / (10 ^ asset.Accuracy)."
          }
        }
      },
      "inline_object_3" : {
        "type" : "object",
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID."
          },
          "fromAddress" : {
            "type" : "string",
            "description" : "Source address."
          },
          "outputs" : {
            "type" : "array",
            "description" : "Destinations.",
            "items" : {
              "$ref" : "#/components/schemas/apitransactionsmanyoutputs_outputs"
            }
          },
          "assetId" : {
            "type" : "string",
            "description" : "Asset ID to transfer, defaults to SKY."
          }
        }
      },
      "inline_response_200_7" : {
        "properties" : {
          "errorCode" : {
            "type" : "string",
            "description" : "Error code. Can be empty. Should be non empty if an error that match one of the listed code is occured. For other errors use HTTP status codes.",
            "enum" : [ "amountIsTooSmall", "notEnoughBalance" ]
          },
          "transactionContext" : {
            "type" : "string",
            "description" : "The transaction context in the blockchain specific format, which will be passed to the [POST] /api/sign. Should be not empty when result is successful."
          }
        },
        "example" : {
          "transactionContext" : "transactionContext",
          "errorCode" : "amountIsTooSmall"
        }
      },
      "inline_response_200_8" : {
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID."
          },
          "state" : {
            "type" : "string",
            "description" : "State of the transaction.",
            "enum" : [ "inProgress", "completed", "failed" ]
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Transaction moment as ISO 8601 in UTC."
          },
          "amount" : {
            "type" : "string",
            "description" : "Amount without fee. Is integer as string, aligned to the asset accuracy. Should be non empty if the  state is  Completed."
          },
          "fee" : {
            "type" : "string",
            "description" : "Fee should be zero if the  state is  Completed."
          },
          "hash" : {
            "type" : "string",
            "description" : "Transaction hash as base64 string. Can be empty. Should be non empty if the  state is  Completed."
          },
          "error" : {
            "type" : "string",
            "description" : "Error description. Can be empty. Should be non empty if the  state is  Error."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "Error code. Can be empty. Should be non empty if the state is Failed.",
            "enum" : [ "unknown", "amountIsTooSmall", "notEnoughBalance" ]
          },
          "block" : {
            "type" : "integer",
            "description" : "Incremental ID of the moment, when the transaction state changing is detected. It should be the same sequence as for block in the  [GET] /api/balances response. In other words block number/height.",
            "format" : "int64"
          }
        },
        "example" : {
          "amount" : "amount",
          "fee" : "fee",
          "operationId" : "operationId",
          "errorCode" : "unknown",
          "block" : 0,
          "state" : "inProgress",
          "error" : "error",
          "hash" : "hash",
          "timestamp" : "timestamp"
        }
      },
      "inline_response_200_9_inputs" : {
        "properties" : {
          "fromAddress" : {
            "type" : "string",
            "description" : "Destination address."
          },
          "amount" : {
            "type" : "string",
            "description" : "Actual amount that is transferred from the fromAddress. Integer as string, aligned to the asset accuracy."
          }
        },
        "example" : {
          "amount" : "amount",
          "fromAddress" : "fromAddress"
        }
      },
      "inline_response_200_9" : {
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID."
          },
          "state" : {
            "type" : "string",
            "description" : "State of the transaction.",
            "enum" : [ "inProgress", "completed", "failed" ]
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Transaction moment as ISO 8601 in UTC."
          },
          "inputs" : {
            "type" : "array",
            "description" : "Destinations. Should be non null if the  state is Completed.",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_9_inputs"
            }
          },
          "toAddress" : {
            "type" : "string",
            "description" : "Destination address."
          },
          "fee" : {
            "type" : "string",
            "description" : "Fee. Is integer as string, aligned to the asset accuracy."
          },
          "hash" : {
            "type" : "string",
            "description" : "Transaction hash as base64 string. Can be empty. Should be non empty if the  state is  Completed."
          },
          "error" : {
            "type" : "string",
            "description" : "Error description. Can be empty. Should be non empty if the  state is  Error."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "Error code. Can be empty. Should be non empty if the state is Failed.",
            "enum" : [ "unknown", "amountIsTooSmall", "notEnoughBalance" ]
          },
          "block" : {
            "type" : "integer",
            "description" : "Incremental ID of the moment, when the transaction state changing is detected. It should be the same sequence as for block in the  [GET] /api/balances response. In other words block number/height.",
            "format" : "int64"
          }
        },
        "example" : {
          "inputs" : [ {
            "amount" : "amount",
            "fromAddress" : "fromAddress"
          }, {
            "amount" : "amount",
            "fromAddress" : "fromAddress"
          } ],
          "fee" : "fee",
          "operationId" : "operationId",
          "errorCode" : "unknown",
          "block" : 0,
          "state" : "inProgress",
          "error" : "error",
          "toAddress" : "toAddress",
          "hash" : "hash",
          "timestamp" : "timestamp"
        }
      },
      "inline_response_200_10_outputs" : {
        "properties" : {
          "toAddress" : {
            "type" : "string",
            "description" : "Destination address."
          },
          "amount" : {
            "type" : "string",
            "description" : "Actual amount that is transferred to the toAddress. Integer as string, aligned to the asset accuracy."
          }
        },
        "example" : {
          "amount" : "amount",
          "toAddress" : "toAddress"
        }
      },
      "inline_response_200_10" : {
        "properties" : {
          "operationId" : {
            "type" : "string",
            "description" : "Operation ID."
          },
          "state" : {
            "type" : "string",
            "description" : "State of the transaction.",
            "enum" : [ "inProgress", "completed", "failed" ]
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Transaction moment as ISO 8601 in UTC."
          },
          "fromAddress" : {
            "type" : "string",
            "description" : "Source address."
          },
          "outputs" : {
            "type" : "array",
            "description" : "Destinations. Should be non null if the  state is Completed.",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_10_outputs"
            }
          },
          "fee" : {
            "type" : "string",
            "description" : "Fee. Is integer as string, aligned to the asset accuracy."
          },
          "hash" : {
            "type" : "string",
            "description" : "Transaction hash as base64 string. Can be empty. Should be non empty if the  state is  Completed."
          },
          "error" : {
            "type" : "string",
            "description" : "Error description. Can be empty. Should be non empty if the  state is  Error"
          },
          "errorCode" : {
            "type" : "string",
            "description" : "Error code. Can be empty. Should be non empty if the state is Failed.",
            "enum" : [ "unknown", "amountIsTooSmall", "notEnoughBalance" ]
          },
          "block" : {
            "type" : "integer",
            "description" : "Incremental ID of the moment, when the transaction state changing is detected. It should be the same sequence as for block in the  [GET] /api/balances response. In other words block number/height.",
            "format" : "int64"
          }
        },
        "example" : {
          "outputs" : [ {
            "amount" : "amount",
            "toAddress" : "toAddress"
          }, {
            "amount" : "amount",
            "toAddress" : "toAddress"
          } ],
          "fee" : "fee",
          "operationId" : "operationId",
          "errorCode" : "unknown",
          "fromAddress" : "fromAddress",
          "block" : 0,
          "state" : "inProgress",
          "error" : "error",
          "hash" : "hash",
          "timestamp" : "timestamp"
        }
      },
      "inline_object_4" : {
        "type" : "object",
        "properties" : {
          "privateKeys" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "transactionContext" : {
            "type" : "string"
          }
        }
      }
    },
    "requestBodies" : {
      "inline_object_1" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_1"
            }
          }
        }
      },
      "inline_object" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object"
            }
          }
        }
      },
      "inline_object_4" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_4"
            }
          }
        }
      },
      "inline_object_3" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_3"
            }
          }
        }
      },
      "inline_object_2" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object_2"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "CsrfTokenAuth" : {
        "type" : "apiKey",
        "name" : "X-CSRF-TOKEN",
        "in" : "header"
      }
    }
  }
}
