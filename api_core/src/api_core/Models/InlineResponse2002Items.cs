/*
 * Python to .Net
 *
 * Still whitout description.
 *
 * OpenAPI spec version: 0.25.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace api_core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2002Items : IEquatable<InlineResponse2002Items>
    { 
        /// <summary>
        /// Wallet address
        /// </summary>
        /// <value>Wallet address</value>
        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Asset ID
        /// </summary>
        /// <value>Asset ID</value>
        [DataMember(Name="assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Balance is integer as string, aligned to the asset accuracy. Actual value can be calculated as x &#x3D; sourceBalance * (10 ^ asset.Accuracy)Balance is integer as string, aligned to the asset accuracy. Actual value can be calculated as x &#x3D; sourceBalance * (10 ^ asset.Accuracy)
        /// </summary>
        /// <value>Balance is integer as string, aligned to the asset accuracy. Actual value can be calculated as x &#x3D; sourceBalance * (10 ^ asset.Accuracy)Balance is integer as string, aligned to the asset accuracy. Actual value can be calculated as x &#x3D; sourceBalance * (10 ^ asset.Accuracy)</value>
        [DataMember(Name="balance")]
        public string Balance { get; set; }

        /// <summary>
        /// Incremental ID of the moment, when balance is updated. It should be the same sequence as for block in the [GET] /api/transactions/broadcast/_* responses
        /// </summary>
        /// <value>Incremental ID of the moment, when balance is updated. It should be the same sequence as for block in the [GET] /api/transactions/broadcast/_* responses</value>
        [DataMember(Name="block")]
        public int? Block { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002Items {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2002Items)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2002Items instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2002Items to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002Items other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    Balance == other.Balance ||
                    Balance != null &&
                    Balance.Equals(other.Balance)
                ) && 
                (
                    Block == other.Block ||
                    Block != null &&
                    Block.Equals(other.Block)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (Balance != null)
                    hashCode = hashCode * 59 + Balance.GetHashCode();
                    if (Block != null)
                    hashCode = hashCode * 59 + Block.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2002Items left, InlineResponse2002Items right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2002Items left, InlineResponse2002Items right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
