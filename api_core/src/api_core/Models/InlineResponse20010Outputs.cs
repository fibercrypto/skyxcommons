/*
 * Python to .Net
 *
 * Still whitout description.
 *
 * OpenAPI spec version: 0.25.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace api_core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20010Outputs : IEquatable<InlineResponse20010Outputs>
    { 
        /// <summary>
        /// Destination address.
        /// </summary>
        /// <value>Destination address.</value>
        [DataMember(Name="toAddress")]
        public string ToAddress { get; set; }

        /// <summary>
        /// Actual amount that is transferred to the toAddress. Integer as string, aligned to the asset accuracy.
        /// </summary>
        /// <value>Actual amount that is transferred to the toAddress. Integer as string, aligned to the asset accuracy.</value>
        [DataMember(Name="amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20010Outputs {\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20010Outputs)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20010Outputs instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20010Outputs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20010Outputs other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ToAddress == other.ToAddress ||
                    ToAddress != null &&
                    ToAddress.Equals(other.ToAddress)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ToAddress != null)
                    hashCode = hashCode * 59 + ToAddress.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20010Outputs left, InlineResponse20010Outputs right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20010Outputs left, InlineResponse20010Outputs right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
