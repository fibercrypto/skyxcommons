/*
 * Python to .Net
 *
 * Still whitout description.
 *
 * OpenAPI spec version: 0.25.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace api_core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2001 : IEquatable<InlineResponse2001>
    { 
        /// <summary>
        /// Error Code
        /// </summary>
        /// <value>Error Code</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum AmountIsTooSmallEnum for amountIsTooSmall
            /// </summary>
            [EnumMember(Value = "amountIsTooSmall")]
            AmountIsTooSmallEnum = 1,
            
            /// <summary>
            /// Enum NotEnoughBalanceEnum for notEnoughBalance
            /// </summary>
            [EnumMember(Value = "notEnoughBalance")]
            NotEnoughBalanceEnum = 2
        }

        /// <summary>
        /// Error Code
        /// </summary>
        /// <value>Error Code</value>
        [DataMember(Name="ErrorCode")]
        public ErrorCodeEnum? ErrorCode { get; set; }

        /// <summary>
        /// The transaction context which will be passed to the [POST] /api/sign
        /// </summary>
        /// <value>The transaction context which will be passed to the [POST] /api/sign</value>
        [DataMember(Name="transactionContext")]
        public string TransactionContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  TransactionContext: ").Append(TransactionContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2001)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ErrorCode == other.ErrorCode ||
                    ErrorCode != null &&
                    ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    TransactionContext == other.TransactionContext ||
                    TransactionContext != null &&
                    TransactionContext.Equals(other.TransactionContext)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                    if (TransactionContext != null)
                    hashCode = hashCode * 59 + TransactionContext.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2001 left, InlineResponse2001 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2001 left, InlineResponse2001 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
