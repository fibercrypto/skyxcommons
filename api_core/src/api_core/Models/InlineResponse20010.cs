/*
 * Python to .Net
 *
 * Still whitout description.
 *
 * OpenAPI spec version: 0.25.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace api_core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20010 : IEquatable<InlineResponse20010>
    { 
        /// <summary>
        /// Operation ID.
        /// </summary>
        /// <value>Operation ID.</value>
        [DataMember(Name="operationId")]
        public string OperationId { get; set; }

        /// <summary>
        /// State of the transaction.
        /// </summary>
        /// <value>State of the transaction.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum InProgressEnum for inProgress
            /// </summary>
            [EnumMember(Value = "inProgress")]
            InProgressEnum = 1,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 2,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 3
        }

        /// <summary>
        /// State of the transaction.
        /// </summary>
        /// <value>State of the transaction.</value>
        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Transaction moment as ISO 8601 in UTC.
        /// </summary>
        /// <value>Transaction moment as ISO 8601 in UTC.</value>
        [DataMember(Name="timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Source address.
        /// </summary>
        /// <value>Source address.</value>
        [DataMember(Name="fromAddress")]
        public string FromAddress { get; set; }

        /// <summary>
        /// Destinations. Should be non null if the  state is Completed.
        /// </summary>
        /// <value>Destinations. Should be non null if the  state is Completed.</value>
        [DataMember(Name="outputs")]
        public List<InlineResponse20010Outputs> Outputs { get; set; }

        /// <summary>
        /// Fee. Is integer as string, aligned to the asset accuracy.
        /// </summary>
        /// <value>Fee. Is integer as string, aligned to the asset accuracy.</value>
        [DataMember(Name="fee")]
        public string Fee { get; set; }

        /// <summary>
        /// Transaction hash as base64 string. Can be empty. Should be non empty if the  state is  Completed.
        /// </summary>
        /// <value>Transaction hash as base64 string. Can be empty. Should be non empty if the  state is  Completed.</value>
        [DataMember(Name="hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Error description. Can be empty. Should be non empty if the  state is  Error
        /// </summary>
        /// <value>Error description. Can be empty. Should be non empty if the  state is  Error</value>
        [DataMember(Name="error")]
        public string Error { get; set; }

        /// <summary>
        /// Error code. Can be empty. Should be non empty if the state is Failed.
        /// </summary>
        /// <value>Error code. Can be empty. Should be non empty if the state is Failed.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum UnknownEnum for unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            UnknownEnum = 1,
            
            /// <summary>
            /// Enum AmountIsTooSmallEnum for amountIsTooSmall
            /// </summary>
            [EnumMember(Value = "amountIsTooSmall")]
            AmountIsTooSmallEnum = 2,
            
            /// <summary>
            /// Enum NotEnoughBalanceEnum for notEnoughBalance
            /// </summary>
            [EnumMember(Value = "notEnoughBalance")]
            NotEnoughBalanceEnum = 3
        }

        /// <summary>
        /// Error code. Can be empty. Should be non empty if the state is Failed.
        /// </summary>
        /// <value>Error code. Can be empty. Should be non empty if the state is Failed.</value>
        [DataMember(Name="errorCode")]
        public ErrorCodeEnum? ErrorCode { get; set; }

        /// <summary>
        /// Incremental ID of the moment, when the transaction state changing is detected. It should be the same sequence as for block in the  [GET] /api/balances response. In other words block number/height.
        /// </summary>
        /// <value>Incremental ID of the moment, when the transaction state changing is detected. It should be the same sequence as for block in the  [GET] /api/balances response. In other words block number/height.</value>
        [DataMember(Name="block")]
        public long? Block { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20010 {\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20010)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20010 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20010 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20010 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OperationId == other.OperationId ||
                    OperationId != null &&
                    OperationId.Equals(other.OperationId)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    FromAddress == other.FromAddress ||
                    FromAddress != null &&
                    FromAddress.Equals(other.FromAddress)
                ) && 
                (
                    Outputs == other.Outputs ||
                    Outputs != null &&
                    Outputs.SequenceEqual(other.Outputs)
                ) && 
                (
                    Fee == other.Fee ||
                    Fee != null &&
                    Fee.Equals(other.Fee)
                ) && 
                (
                    Hash == other.Hash ||
                    Hash != null &&
                    Hash.Equals(other.Hash)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    ErrorCode == other.ErrorCode ||
                    ErrorCode != null &&
                    ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    Block == other.Block ||
                    Block != null &&
                    Block.Equals(other.Block)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OperationId != null)
                    hashCode = hashCode * 59 + OperationId.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (FromAddress != null)
                    hashCode = hashCode * 59 + FromAddress.GetHashCode();
                    if (Outputs != null)
                    hashCode = hashCode * 59 + Outputs.GetHashCode();
                    if (Fee != null)
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                    if (Hash != null)
                    hashCode = hashCode * 59 + Hash.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                    if (Block != null)
                    hashCode = hashCode * 59 + Block.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20010 left, InlineResponse20010 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20010 left, InlineResponse20010 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
