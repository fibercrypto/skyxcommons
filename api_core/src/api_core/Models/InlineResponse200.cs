/*
 * Python to .Net
 *
 * Still whitout description.
 *
 * OpenAPI spec version: 0.25.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace api_core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse200 : IEquatable<InlineResponse200>
    { 
        /// <summary>
        /// Private key, which will be used to sign transactions by the [POST] /api/sign
        /// </summary>
        /// <value>Private key, which will be used to sign transactions by the [POST] /api/sign</value>
        [DataMember(Name="privateKey")]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Address which identifies the wallet in the blockchain
        /// </summary>
        /// <value>Address which identifies the wallet in the blockchain</value>
        [DataMember(Name="publicAddress")]
        public string PublicAddress { get; set; }

        /// <summary>
        /// Any non security sensitive data associated with wallet. This context will be passed to [POST] /api/transactions/_*. Can be empty.
        /// </summary>
        /// <value>Any non security sensitive data associated with wallet. This context will be passed to [POST] /api/transactions/_*. Can be empty.</value>
        [DataMember(Name="addressContext")]
        public string AddressContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200 {\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  PublicAddress: ").Append(PublicAddress).Append("\n");
            sb.Append("  AddressContext: ").Append(AddressContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse200)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse200 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PrivateKey == other.PrivateKey ||
                    PrivateKey != null &&
                    PrivateKey.Equals(other.PrivateKey)
                ) && 
                (
                    PublicAddress == other.PublicAddress ||
                    PublicAddress != null &&
                    PublicAddress.Equals(other.PublicAddress)
                ) && 
                (
                    AddressContext == other.AddressContext ||
                    AddressContext != null &&
                    AddressContext.Equals(other.AddressContext)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PrivateKey != null)
                    hashCode = hashCode * 59 + PrivateKey.GetHashCode();
                    if (PublicAddress != null)
                    hashCode = hashCode * 59 + PublicAddress.GetHashCode();
                    if (AddressContext != null)
                    hashCode = hashCode * 59 + AddressContext.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse200 left, InlineResponse200 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse200 left, InlineResponse200 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
